<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security 
						http://www.springframework.org/schema/security/spring-security.xsd
						http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean>
	<!-- <bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"></bean> -->
	<!-- 32.2.2 BCryptPasswordEncoder 클래스를 이용한 패스워드 보호 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<security:http auto-config="true" use-expressions="true">
			
		<security:intercept-url pattern="/sample/all" access="permitAll" />
		<!-- 31.1 접근 제한 설정 -->
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
		
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" />
		
		<!-- 31.2.3 접근 제한 메시지의 처리 -->
		<!-- <security:access-denied-handler error-page="/accessError" /> -->
		
		<!-- 31.2.4 AccessDeniedHandler 인터페이스를 구현하는 경우 -->
		<security:access-denied-handler ref="customAccessDenied"/>
		<!-- 31.3 커스텀 로그인 페이지 -->
		<!-- <security:form-login/> 프레임워크 자체 제공 폼 -->
		<security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess" />
		
		<!-- 31.6 로그아웃의 처리와 LogoutSuccessHandler -->
		<security:logout logout-url="/customLogout" invalidate-session="true" />
		
		<!-- 31.4.2 스프링 시큐리티의 CSRF 설정 -->
		<!-- <security:csrf disabled="true" /> -->
		
	</security:http>
	
	
	<security:authentication-manager>
		
		<security:authentication-provider>
			
			<!-- <security:jdbc-user-service data-source-ref="dataSource" /> -->
			<!-- 32.2.3 쿼리를 이용하는 인증 -->
			<security:jdbc-user-service data-source-ref="dataSource" 
				users-by-username-query="select userid, userpw, enabled from tbl_member where userid = ? "
				authorities-by-username-query="select userid, auth from tbl_member_auth where userid = ? " />
				<!-- 31.2 단순 로그인 처리 -->
				<!-- <security:user name="member" password="{noop}member" authorities="ROLE_MEMBER" /> -->
				<!-- 31.2.2 여러 권한을 가진 사용자 설정 -->
				<!-- <security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN" /> -->
				
				<!-- 32.JDBC를 이용하는 간편 인증/권한 처리 -->
			
			<!-- 32.1.1 PasswordEncoder 문제 해결 -->
			<!-- <security:password-encoder ref="customPasswordEncoder"/> -->
			
			<security:password-encoder ref="bcryptPasswordEncoder" />
			
		</security:authentication-provider>
		
	</security:authentication-manager>
</beans>
